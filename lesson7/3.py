# Task 3
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение. Умножение. Создается общая клетка из двух. Число
# ячеек общей клетки определяется как произведение количества ячеек этих двух клеток. Деление. Создается общая клетка
# из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток. В
# классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в
# ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****...

class Cell:

    def __init__(self,num):
        self.num = num

    def __str__(self):
        return f'{self.num}'


    def __add__(self, other):
        if other.__class__.__name__ == "Cell":
            self.num = self.num + other.num
            return self
        else:
            return f'Error type'

    def __sub__(self, other):
        if other.__class__.__name__ == "Cell" and self.num > other.num:
            self.num = self.num - other.num
            return self
        else:
            return f'Error type or number cell'
        pass

    def __mul__(self, other):
        if other.__class__.__name__ == "Cell":
            self.num = self.num * other.num
            return self
        else:
            return f'Error type'



    def __truediv__(self, other):
        if other.__class__.__name__ == "Cell":
            self.num = self.num / other.num
            return self
        else:
            return f'Error type'

    def make_order(self,row_num):
        n = row_num
        while True:
            s = ''
            if self.num > n:
                for i in range(row_num):
                    s += '*'
            else:

                for i in range(self.num-(n-row_num)):
                    s += '*'
                s = s + '\n'
                print(s)
                break
            s = s +'\n'
            n =n+row_num
            print(s)
cell = Cell(11)
cell2 = Cell(10)
cell.make_order(5)
print(cell + cell2)
print(cell - cell2)
print(cell * cell2)
print(cell / cell2)
print(11 / 10)